{"ast":null,"code":"var _jsxFileName = \"/Users/chenguanyu/Desktop/yuniver_CRUD/client/src/pages/FlowChartEditor.jsx\",\n  _s = $RefreshSig$();\n// src/pages/FlowChartEditor.jsx\nimport React, { useState, useEffect, useCallback } from 'react';\nimport ReactFlow, { addEdge, MiniMap, Controls, Background } from 'react-flow-renderer';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FlowChartEditor = () => {\n  _s();\n  const {\n    id: projectId\n  } = useParams(); // 從路由取得專案 id\n  const token = localStorage.getItem('token');\n  const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n\n  // 取得流程圖 JSON，並轉換成 nodes 與 edges\n  useEffect(() => {\n    const fetchFlowChart = async () => {\n      try {\n        const res = await axios.get(`${API_URL}/projects/${projectId}/flowchart`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        const flowChartData = res.data; // 期望格式為一個 JSON 陣列，每個元素包含 id, type, label, position, children\n        let loadedNodes = [];\n        let loadedEdges = [];\n        if (Array.isArray(flowChartData)) {\n          // 將每個流程圖物件轉成 react-flow 的 node\n          loadedNodes = flowChartData.map(item => ({\n            id: item.id,\n            data: {\n              label: `${item.label} (${item.type})`\n            },\n            position: item.position || {\n              x: Math.random() * 250,\n              y: Math.random() * 250\n            }\n          }));\n          // 如果物件有 children，依照 children 陣列產生 edge (由 parent 連到 child)\n          flowChartData.forEach(item => {\n            if (item.children && item.children.length > 0) {\n              item.children.forEach(childId => {\n                loadedEdges.push({\n                  id: `e${item.id}-${childId}`,\n                  source: item.id,\n                  target: childId\n                });\n              });\n            }\n          });\n        }\n        setNodes(loadedNodes);\n        setEdges(loadedEdges);\n      } catch (error) {\n        console.error('Failed to load flow chart:', error);\n      }\n    };\n    fetchFlowChart();\n  }, [projectId, API_URL, token]);\n  const onNodesChange = useCallback(changes => {\n    setNodes(nds => nds.map(node => {\n      const change = changes.find(c => c.id === node.id);\n      return change ? {\n        ...node,\n        ...change\n      } : node;\n    }));\n  }, []);\n  const onEdgesChange = useCallback(changes => {\n    setEdges(eds => eds.map(edge => {\n      const change = changes.find(c => c.id === edge.id);\n      return change ? {\n        ...edge,\n        ...change\n      } : edge;\n    }));\n  }, []);\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), []);\n\n  // 儲存時，將 nodes 與 edges 轉換回 JSON 格式\n  const saveFlowChart = async () => {\n    // 建立一個簡單的轉換：每個 node 轉換成物件，並依 edges 將 children 陣列填入\n    let flowChartData = nodes.map(node => {\n      var _node$data$label$spli;\n      return {\n        id: node.id,\n        type: ((_node$data$label$spli = node.data.label.split('(')[1]) === null || _node$data$label$spli === void 0 ? void 0 : _node$data$label$spli.replace(')', '')) || 'task',\n        label: node.data.label,\n        position: node.position,\n        children: []\n      };\n    });\n    edges.forEach(edge => {\n      const parent = flowChartData.find(n => n.id === edge.source);\n      if (parent) {\n        parent.children.push(edge.target);\n      }\n    });\n    try {\n      await axios.put(`${API_URL}/projects/${projectId}/flowchart`, {\n        flowChart: flowChartData\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      alert('Flow chart saved successfully!');\n    } catch (error) {\n      console.error('Failed to save flow chart:', error);\n      alert('Save failed');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: 600,\n      border: '1px solid #ddd',\n      margin: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      onInit: setReactFlowInstance,\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveFlowChart,\n        children: \"Save Flow Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(FlowChartEditor, \"QMOLLn43UeqN+KvZl1CQmttUqzk=\", false, function () {\n  return [useParams];\n});\n_c = FlowChartEditor;\nexport default FlowChartEditor;\nvar _c;\n$RefreshReg$(_c, \"FlowChartEditor\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","ReactFlow","addEdge","MiniMap","Controls","Background","axios","useParams","jsxDEV","_jsxDEV","FlowChartEditor","_s","id","projectId","token","localStorage","getItem","API_URL","process","env","REACT_APP_API_URL","nodes","setNodes","edges","setEdges","reactFlowInstance","setReactFlowInstance","fetchFlowChart","res","get","headers","Authorization","flowChartData","data","loadedNodes","loadedEdges","Array","isArray","map","item","label","type","position","x","Math","random","y","forEach","children","length","childId","push","source","target","error","console","onNodesChange","changes","nds","node","change","find","c","onEdgesChange","eds","edge","onConnect","params","saveFlowChart","_node$data$label$spli","split","replace","parent","n","put","flowChart","alert","style","height","border","margin","onInit","fitView","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/chenguanyu/Desktop/yuniver_CRUD/client/src/pages/FlowChartEditor.jsx"],"sourcesContent":["\n// src/pages/FlowChartEditor.jsx\nimport React, { useState, useEffect, useCallback } from 'react';\nimport ReactFlow, { addEdge, MiniMap, Controls, Background } from 'react-flow-renderer';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\n\nconst FlowChartEditor = () => {\n  const { id: projectId } = useParams(); // 從路由取得專案 id\n  const token = localStorage.getItem('token');\n  const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n\n  // 取得流程圖 JSON，並轉換成 nodes 與 edges\n  useEffect(() => {\n    const fetchFlowChart = async () => {\n      try {\n        const res = await axios.get(`${API_URL}/projects/${projectId}/flowchart`, {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n        const flowChartData = res.data; // 期望格式為一個 JSON 陣列，每個元素包含 id, type, label, position, children\n        let loadedNodes = [];\n        let loadedEdges = [];\n        if (Array.isArray(flowChartData)) {\n          // 將每個流程圖物件轉成 react-flow 的 node\n          loadedNodes = flowChartData.map(item => ({\n            id: item.id,\n            data: { label: `${item.label} (${item.type})` },\n            position: item.position || { x: Math.random() * 250, y: Math.random() * 250 },\n          }));\n          // 如果物件有 children，依照 children 陣列產生 edge (由 parent 連到 child)\n          flowChartData.forEach(item => {\n            if (item.children && item.children.length > 0) {\n              item.children.forEach(childId => {\n                loadedEdges.push({\n                  id: `e${item.id}-${childId}`,\n                  source: item.id,\n                  target: childId,\n                });\n              });\n            }\n          });\n        }\n        setNodes(loadedNodes);\n        setEdges(loadedEdges);\n      } catch (error) {\n        console.error('Failed to load flow chart:', error);\n      }\n    };\n    fetchFlowChart();\n  }, [projectId, API_URL, token]);\n\n  const onNodesChange = useCallback((changes) => {\n    setNodes((nds) => nds.map((node) => {\n      const change = changes.find(c => c.id === node.id);\n      return change ? { ...node, ...change } : node;\n    }));\n  }, []);\n\n  const onEdgesChange = useCallback((changes) => {\n    setEdges((eds) => eds.map((edge) => {\n      const change = changes.find(c => c.id === edge.id);\n      return change ? { ...edge, ...change } : edge;\n    }));\n  }, []);\n\n  const onConnect = useCallback((params) => setEdges((eds) => addEdge(params, eds)), []);\n\n  // 儲存時，將 nodes 與 edges 轉換回 JSON 格式\n  const saveFlowChart = async () => {\n    // 建立一個簡單的轉換：每個 node 轉換成物件，並依 edges 將 children 陣列填入\n    let flowChartData = nodes.map(node => ({\n      id: node.id,\n      type: node.data.label.split('(')[1]?.replace(')', '') || 'task',\n      label: node.data.label,\n      position: node.position,\n      children: []\n    }));\n    edges.forEach(edge => {\n      const parent = flowChartData.find(n => n.id === edge.source);\n      if (parent) {\n        parent.children.push(edge.target);\n      }\n    });\n    try {\n      await axios.put(`${API_URL}/projects/${projectId}/flowchart`, \n        { flowChart: flowChartData },\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      alert('Flow chart saved successfully!');\n    } catch (error) {\n      console.error('Failed to save flow chart:', error);\n      alert('Save failed');\n    }\n  };\n\n  return (\n    <div style={{ height: 600, border: '1px solid #ddd', margin: '20px' }}>\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        onInit={setReactFlowInstance}\n        fitView\n      >\n        <MiniMap />\n        <Controls />\n        <Background />\n      </ReactFlow>\n      <div style={{ margin: '10px' }}>\n        <button onClick={saveFlowChart}>Save Flow Chart</button>\n      </div>\n    </div>\n  );\n};\n\nexport default FlowChartEditor;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}