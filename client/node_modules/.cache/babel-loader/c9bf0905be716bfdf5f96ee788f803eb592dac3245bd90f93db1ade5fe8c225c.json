{"ast":null,"code":"// client/src/api/project.js\nimport axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n// 如果你後端是跑在 5001 port，請確保與後端設定相符\n\n/**\n * 取得所有專案列表\n * @param {string} token - JWT token\n * @returns {Promise<Array>} - 專案陣列\n */\nexport const fetchAllProjects = async token => {\n  try {\n    const response = await axios.get(`${API_URL}/projects`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data; // 回傳專案列表\n  } catch (error) {\n    console.error('fetchAllProjects error:', error);\n    throw error;\n  }\n};\n\n/**\n * 取得單一專案的詳細資訊\n * @param {string} projectId - 專案ID\n * @param {string} token - JWT token\n * @returns {Promise<Object>} - 專案詳細資料\n */\nexport const getProjectDetails = async (projectId, token) => {\n  try {\n    const response = await axios.get(`${API_URL}/projects/${projectId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('getProjectDetails error:', error);\n    throw error;\n  }\n};\n\n/**\n * 新增專案\n * @param {Object} projectData - 專案表單資料\n * @param {string} token - JWT token\n * @returns {Promise<Object>}\n */\nexport const createProject = async (projectData, token) => {\n  try {\n    const response = await axios.post(`${API_URL}/projects`, projectData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data; // { message: 'Project created', project: newProject }\n  } catch (error) {\n    console.error('createProject error:', error);\n    throw error;\n  }\n};\n\n/**\n * 更新專案\n * @param {string} projectId\n * @param {Object} updateData - 要更新的內容\n * @param {string} token\n * @returns {Promise<Object>}\n */\nexport const updateProject = async (projectId, updateData, token) => {\n  try {\n    const response = await axios.put(`${API_URL}/projects/${projectId}`, updateData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('updateProject error:', error);\n    throw error;\n  }\n};\n\n/**\n * 新增備註(便利貼)\n * @param {string} projectId\n * @param {string} content - 備註內容\n * @param {string} token\n * @returns {Promise<Object>}\n */\nexport const addNote = async (projectId, content, token) => {\n  try {\n    const response = await axios.post(`${API_URL}/projects/${projectId}/notes`, {\n      content\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data; // { message: 'Note added', project }\n  } catch (error) {\n    console.error('addNote error:', error);\n    throw error;\n  }\n};\n\n/**\n * 新增溝通訊息\n * @param {string} projectId\n * @param {string} message\n * @param {string} token\n * @returns {Promise<Object>}\n */\nexport const addMessage = async (projectId, message, token) => {\n  try {\n    const response = await axios.post(`${API_URL}/projects/${projectId}/messages`, {\n      message\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data; // { message: 'Message added', project }\n  } catch (error) {\n    console.error('addMessage error:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","fetchAllProjects","token","response","get","headers","Authorization","data","error","console","getProjectDetails","projectId","createProject","projectData","post","updateProject","updateData","put","addNote","content","addMessage","message"],"sources":["/Users/chenguanyu/Desktop/client/src/api/project.js"],"sourcesContent":["// client/src/api/project.js\nimport axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api'; \n// 如果你後端是跑在 5001 port，請確保與後端設定相符\n\n/**\n * 取得所有專案列表\n * @param {string} token - JWT token\n * @returns {Promise<Array>} - 專案陣列\n */\nexport const fetchAllProjects = async (token) => {\n  try {\n    const response = await axios.get(`${API_URL}/projects`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    return response.data; // 回傳專案列表\n  } catch (error) {\n    console.error('fetchAllProjects error:', error);\n    throw error;\n  }\n};\n\n/**\n * 取得單一專案的詳細資訊\n * @param {string} projectId - 專案ID\n * @param {string} token - JWT token\n * @returns {Promise<Object>} - 專案詳細資料\n */\nexport const getProjectDetails = async (projectId, token) => {\n  try {\n    const response = await axios.get(`${API_URL}/projects/${projectId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    return response.data; \n  } catch (error) {\n    console.error('getProjectDetails error:', error);\n    throw error;\n  }\n};\n\n/**\n * 新增專案\n * @param {Object} projectData - 專案表單資料\n * @param {string} token - JWT token\n * @returns {Promise<Object>}\n */\nexport const createProject = async (projectData, token) => {\n  try {\n    const response = await axios.post(`${API_URL}/projects`, projectData, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    return response.data; // { message: 'Project created', project: newProject }\n  } catch (error) {\n    console.error('createProject error:', error);\n    throw error;\n  }\n};\n\n/**\n * 更新專案\n * @param {string} projectId\n * @param {Object} updateData - 要更新的內容\n * @param {string} token\n * @returns {Promise<Object>}\n */\nexport const updateProject = async (projectId, updateData, token) => {\n  try {\n    const response = await axios.put(`${API_URL}/projects/${projectId}`, updateData, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    return response.data; \n  } catch (error) {\n    console.error('updateProject error:', error);\n    throw error;\n  }\n};\n\n/**\n * 新增備註(便利貼)\n * @param {string} projectId\n * @param {string} content - 備註內容\n * @param {string} token\n * @returns {Promise<Object>}\n */\nexport const addNote = async (projectId, content, token) => {\n  try {\n    const response = await axios.post(\n      `${API_URL}/projects/${projectId}/notes`,\n      { content },\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    );\n    return response.data; // { message: 'Note added', project }\n  } catch (error) {\n    console.error('addNote error:', error);\n    throw error;\n  }\n};\n\n/**\n * 新增溝通訊息\n * @param {string} projectId\n * @param {string} message\n * @param {string} token\n * @returns {Promise<Object>}\n */\nexport const addMessage = async (projectId, message, token) => {\n  try {\n    const response = await axios.post(\n      `${API_URL}/projects/${projectId}/messages`,\n      { message },\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    );\n    return response.data; // { message: 'Message added', project }\n  } catch (error) {\n    console.error('addMessage error:', error);\n    throw error;\n  }\n};\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAC5E;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,KAAK,IAAK;EAC/C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAAC,GAAGP,OAAO,WAAW,EAAE;MACtDQ,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUJ,KAAK;MAChC;IACF,CAAC,CAAC;IACF,OAAOC,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,iBAAiB,GAAG,MAAAA,CAAOC,SAAS,EAAET,KAAK,KAAK;EAC3D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAAC,GAAGP,OAAO,aAAac,SAAS,EAAE,EAAE;MACnEN,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUJ,KAAK;MAChC;IACF,CAAC,CAAC;IACF,OAAOC,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,aAAa,GAAG,MAAAA,CAAOC,WAAW,EAAEX,KAAK,KAAK;EACzD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACkB,IAAI,CAAC,GAAGjB,OAAO,WAAW,EAAEgB,WAAW,EAAE;MACpER,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUJ,KAAK;MAChC;IACF,CAAC,CAAC;IACF,OAAOC,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,aAAa,GAAG,MAAAA,CAAOJ,SAAS,EAAEK,UAAU,EAAEd,KAAK,KAAK;EACnE,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACqB,GAAG,CAAC,GAAGpB,OAAO,aAAac,SAAS,EAAE,EAAEK,UAAU,EAAE;MAC/EX,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUJ,KAAK;MAChC;IACF,CAAC,CAAC;IACF,OAAOC,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMU,OAAO,GAAG,MAAAA,CAAOP,SAAS,EAAEQ,OAAO,EAAEjB,KAAK,KAAK;EAC1D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACkB,IAAI,CAC/B,GAAGjB,OAAO,aAAac,SAAS,QAAQ,EACxC;MAAEQ;IAAQ,CAAC,EACX;MACEd,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUJ,KAAK;MAChC;IACF,CACF,CAAC;IACD,OAAOC,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACtC,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMY,UAAU,GAAG,MAAAA,CAAOT,SAAS,EAAEU,OAAO,EAAEnB,KAAK,KAAK;EAC7D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACkB,IAAI,CAC/B,GAAGjB,OAAO,aAAac,SAAS,WAAW,EAC3C;MAAEU;IAAQ,CAAC,EACX;MACEhB,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUJ,KAAK;MAChC;IACF,CACF,CAAC;IACD,OAAOC,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IACzC,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}